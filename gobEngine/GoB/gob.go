package gob

import (
	"strings"
	"syscall/js"
	"time"
)

// This is 2x the resolution of the original nintendo GB
const (
	ScreenWidth  = 320
	ScreenHeight = 288
)

var engineStart = int64(0)

// Engine is the main game engine
type Engine struct {
	// 2 pixels per byte + 1 byte for the pallet
	ScreenBuf                  [((ScreenWidth * ScreenHeight) / 2) + 1]byte
	screenBufHook              js.Value
	BGColor                    Col
	kl                         *keyListener
	ml                         *mouseListener
	Update                     func(tdiff float64)
	Draw                       func()
	Resource                   *Resource
	DrawMouse                  bool
	ClipX, ClipY, ClipW, ClipH int
	CameraX, CameraY           int
}

// NewEngine creates a new game engine
func NewEngine(updatFunc func(tdiff float64), drawFunc func()) Engine {
	ret := Engine{
		Update:        updatFunc,
		Draw:          drawFunc,
		screenBufHook: js.Global().Get("pixelData"),
		kl:            newKeyListener(js.Global().Get("document")),
		ml:            newMouseListener(js.Global().Get("mycanvas")),
		ClipW:         ScreenWidth,
		ClipH:         ScreenHeight,
		BGColor:       Col8,
	}

	// Set the pallet
	ret.ScreenBuf[0] = byte(Pal1)

	return ret
}

// Run starts the game engine running
func (e *Engine) Run() {
	var renderFrame js.Func
	var tmark float64

	renderFrame = js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		now := args[0].Float()

		e.Update(now - tmark)
		e.Draw()
		if e.DrawMouse {
			tmp := e.Resource
			e.Resource = &internalRes
			e.Spr8(64, e.ml.x-1, e.ml.y-1, SprOpts{Transparent: Col1})
			e.Resource = tmp
		}
		e.kl.tick()
		e.ml.tick()

		tmark = now

		js.CopyBytesToJS(e.screenBufHook, e.ScreenBuf[:])
		js.Global().Call("drawScreen")
		js.Global().Call("requestAnimationFrame", renderFrame)

		return nil
	})
	engineStart = time.Now().UnixNano()

	done := make(chan struct{}, 0)

	js.Global().Call("requestAnimationFrame", renderFrame)
	<-done
}

// Time is the number of seconds since the engine was started
func (e *Engine) Time() float64 {
	sec := 1000000000.0
	now := time.Now().UnixNano()
	return float64(engineStart-now) / sec
}

//Load loads in a resource file to the game engine
func (e *Engine) Load(resource *Resource) {
	e.Resource = resource
}

// Mouse returns the X, Y coords of the mouse
func (e *Engine) Mouse() (int, int) {
	return e.ml.x, e.ml.y
}

// Cls clears the screen and resets TextL and TextR
func (e *Engine) Cls() {
	textLline, textRline = 0, 0
	for i := 1; i < len(e.ScreenBuf); i++ {
		e.ScreenBuf[i] = PackPixels(e.BGColor, e.BGColor)
	}
}

// Camera moves the camera which modifies all draw functions
func (e *Engine) Camera(x, y int) {
	e.CameraX, e.CameraY = x, y
}

// Rect draws a rectangle border on the screen
func (e *Engine) Rect(x, y, w, h int, col Col) {
	x -= e.CameraX
	y -= e.CameraY
	for r := 0; r < w; r++ {
		e.Pset(x+r, y, col)
		e.Pset(x+r, y+(h-1), col)
	}
	for c := 0; c < h; c++ {
		e.Pset(x, y+c, col)
		e.Pset(x+(w-1), y+c, col)
	}
}

// RectFill draws a filled rectangle one the screen
func (e *Engine) RectFill(x, y, w, h int, col Col) {
	x -= e.CameraX
	y -= e.CameraY
	for r := 0; r < w; r++ {
		for c := 0; c < h; c++ {
			e.Pset(r+x, c+y, col)
		}
	}
}

// Line draws a colored line
func (e *Engine) Line(x1, y1, x2, y2 int, col Col) {
	x1 -= e.CameraX
	x2 -= e.CameraX
	y1 -= e.CameraY
	y2 -= e.CameraY
	if x2 < x1 {
		x2, x1 = x1, x2
	}
	w := x2 - x1
	dh := (float64(y2) - float64(y1)) / float64(w)
	if w > 0 {
		for x := x1; x < x2; x++ {
			e.Pset(x, y1+int(dh*float64(x-x1)), col)
		}
		return
	}
	if y2 < y1 {
		y2, y1 = y1, y2
	}
	h := y2 - y1
	dw := (float64(x2) - float64(x1)) / float64(h)
	if h > 0 {
		for y := y1; y < y2; y++ {
			e.Pset(x1+int(dw*float64(y-y1)), y, col)
		}
	}
}

// Clip clips all functions that draw to the screen
func (e *Engine) Clip(x, y, w, h int) {
	e.ClipX, e.ClipY = x, y
	if x+w > ScreenWidth {
		w = ScreenWidth - x
	}
	if y+h > ScreenHeight {
		h = ScreenHeight - y
	}
	e.ClipW, e.ClipH = w, h
}

// RClip resets the screen cliping
func (e *Engine) RClip() {
	e.ClipX, e.ClipY = 0, 0
	e.ClipW, e.ClipH = ScreenWidth, ScreenHeight
}

// Pset sets a pixel on the screen
func (e *Engine) Pset(x, y int, col Col) {
	x -= e.CameraX
	y -= e.CameraY
	if x >= e.ClipX+e.ClipW || y >= e.ClipY+e.ClipH || x < e.ClipX || y < e.ClipY {
		return
	}

	i := (y*ScreenWidth/2 + x/2) + 1
	hi := (x%2 == 0)
	packed := e.ScreenBuf[i]
	if hi {
		packed &= 0b11110000
	} else {
		packed &= 0b00001111
		col <<= 4
	}

	e.ScreenBuf[i] = packed | byte(col)
}

// Pget gets the color of a pixel on the screen
func (e *Engine) Pget(x, y int) Col {
	x -= e.CameraX
	y -= e.CameraY
	if x >= ScreenWidth || y >= ScreenHeight || x < 0 || y < 0 {
		return Col(0)
	}

	i := (y*ScreenWidth/2 + x/2) + 1
	hi := (x%2 == 0)
	col := e.ScreenBuf[i]
	if hi {
		return Col(col&0b11110000) >> 4
	}
	return Col(col & 0b00001111)
}

// SprOpts additional options for drawing sprites
type SprOpts struct {
	FlipH       bool
	FlipV       bool
	Transparent Col
	PalFrom     []Col
	PalTo       []Col
}

// Spr8 draws 8x8 sprite n from the sprite sheet to the
// screen at x, y.
func (e *Engine) Spr8(n, x, y int, opts ...SprOpts) {
	if n < 0 {
		return
	}
	if len(opts) == 0 {
		opts = make([]SprOpts, 1)
		opts[0] = SprOpts{}
	}
	e.SSpr(n%32*8, n/32*8, 8, 8, x, y, opts[0])
}

// Spr16 draws 16x16 sprite n from the sprite sheet to the
// screen at x, y.
func (e *Engine) Spr16(n, x, y int, opts ...SprOpts) {
	if len(opts) == 0 {
		opts = make([]SprOpts, 1)
		opts[0] = SprOpts{}
	}
	e.SSpr(n%16*16, n/16*16, 16, 16, x, y, opts[0])
}

// Spr32 draws 32x32 sprite n from the sprite sheet to the
// screen at x, y.
func (e *Engine) Spr32(n, x, y int, opts ...SprOpts) {
	if len(opts) == 0 {
		opts = make([]SprOpts, 1)
		opts[0] = SprOpts{}
	}
	e.SSpr(n%8*32, n/8*32, 32, 32, x, y, opts[0])
}

// SSpr draw a rect from the sprite sheet to the screen
// sx, sy, sw, and sh define the rect on the sprite sheet
// dx, dy is the location to draw on the screen
func (e *Engine) SSpr(sx, sy, sw, sh, dx, dy int, opts ...SprOpts) {
	dx -= e.CameraX
	dy -= e.CameraY
	if sx > spriteCount*spriteSize || sy > spriteCount*spriteSize || sx < 0 || sy < 0 {
		return
	}
	if len(opts) == 0 {
		opts = make([]SprOpts, 1)
		opts[0] = SprOpts{}
	}

	width := spriteCount * spriteSize / 2
	baseI := sx/2 + sy*width
	for i := 0; i < (sw / 2); i++ {
		for j := 0; j < sh; j++ {
			index := baseI + i + j*width
			p1 := e.Resource[index]
			a, b, t := Col(p1>>4), Col(p1&0b00001111), opts[0].Transparent
			if t == 0 {
				t = Col15 + 1
			}
			if t == TCol0 {
				t = Col0
			}
			if sx%2 == 1 {
				p2 := e.Resource[index+1]
				a, b = Col(p1&0b00001111), Col(p2>>4)
			}
			tmpi, tmpj := i, j
			if opts[0].FlipH {
				tmpi = (sw / 2) - i - 1
				a, b = b, a
			}
			if opts[0].FlipV {
				tmpj = sh - j - 1
			}
			a = subPixels(opts[0].PalFrom, opts[0].PalTo, a)
			b = subPixels(opts[0].PalFrom, opts[0].PalTo, b)
			drawX, drawY := dx+tmpi*2, dy+tmpj
			if a != t {
				e.Pset(drawX, drawY, a)
			}
			if b != t {
				e.Pset(drawX+1, drawY, b)
			}
		}
	}
}

func subPixels(palFrom, palTo []Col, col Col) Col {
	if len(palFrom) == 0 {
		return col
	}
	for i, p := range palFrom {
		if p == col {
			return palTo[i]
		}
	}
	return col
}

var textLline, textRline = 0, 0
var textRef = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$%.,/? -:[]()"

// TextL prints text at the top left of the screen
// the cursor moves to a new line each time TextL is called
func (e *Engine) TextL(text string, col ...Col) {
	if len(col) > 0 {
		e.Text(text, 1, 1+8*textLline, col[0])
	} else {
		e.Text(text, 1, 1+8*textLline)
	}
	textLline++
}

// TextR prints text at the top right of the screen
// the cursor moves to a new line each time TextR is called
func (e *Engine) TextR(text string, col ...Col) {
	splitText := strings.Split(text, "\n")
	for _, line := range splitText {
		x := ScreenWidth - 1 - len(line)*6
		if len(col) > 0 {
			e.Text(line, x, 1+8*textRline, col[0])
		} else {
			e.Text(line, x, 1+8*textRline)
		}
		textRline++
	}
}

// Text prints text at the x, y coords on the screen
func (e *Engine) Text(text string, x, y int, col ...Col) {
	x -= e.CameraX
	y -= e.CameraY
	text = strings.ToUpper(text)
	splitText := strings.Split(text, "\n")
	for j, line := range splitText {
		for i, char := range line {
			sx := strings.Index(textRef, string(char)) * 6
			sy := (sx / 252) * 8
			sx %= 252
			tmpRes := e.Resource
			e.Resource = &internalRes
			opts := SprOpts{Transparent: TCol0}
			if len(col) > 0 {
				if col[0] == Col0 {
					opts.PalFrom = append(opts.PalFrom, Col0)
					opts.PalTo = append(opts.PalTo, Col1)
					opts.Transparent = Col1
				}
				opts.PalFrom = append(opts.PalFrom, Col15)
				opts.PalTo = append(opts.PalTo, col[0])
			}
			e.SSpr(sx, sy, 6, 6, x+6*i, y+j*8, opts)
			e.Resource = tmpRes
		}
	}
}

// Pal1 sets pallet one
func (e *Engine) Pal1(pallet Pal) {
	p := 0b00001111 | (pallet << 4)
	e.ScreenBuf[0] |= 0b11110000
	e.ScreenBuf[0] &= byte(p)
}

// Pal2 sets pallet one
func (e *Engine) Pal2(pallet Pal) {
	e.ScreenBuf[0] &= 0b11110000
	e.ScreenBuf[0] |= byte(pallet)
}

// PalGet gets the currently set pallets
func (e *Engine) PalGet() (Pal, Pal) {
	return Pal(e.ScreenBuf[0] >> 4), Pal(e.ScreenBuf[0] & 0b00001111)
}

// These are the pallet and color constants
const (
	Col0  = Col(0b00000000)
	TCol0 = Col(0b10000001)
	Col1  = Col(0b00000001)
	Col2  = Col(0b00000010)
	Col3  = Col(0b00000011)
	Col4  = Col(0b00000100)
	Col5  = Col(0b00000101)
	Col6  = Col(0b00000110)
	Col7  = Col(0b00000111)
	Col8  = Col(0b00001000)
	Col9  = Col(0b00001001)
	Col10 = Col(0b00001010)
	Col11 = Col(0b00001011)
	Col12 = Col(0b00001100)
	Col13 = Col(0b00001101)
	Col14 = Col(0b00001110)
	Col15 = Col(0b00001111)
)

// Col is a screen color
type Col byte

// UnPackPixels unpacks the 2 pixels from thir byte representation
func UnPackPixels(b byte) (Col, Col) {
	return Col(b&0b11110000) >> 4, Col(b & 0b00001111)
}

// PackPixels packs 2 pixels into a single byte
func PackPixels(pixel1, pixel2 Col) byte {
	return byte(pixel1<<4 | pixel2)
}

// The list of all pallets
const (
	Pal0 = Pal(0b00000000)
	Pal1 = Pal(0b00000001)
	Pal2 = Pal(0b00000010)
	Pal3 = Pal(0b00000011)
	Pal4 = Pal(0b00000100)
	Pal5 = Pal(0b00000101)
	Pal6 = Pal(0b00000110)
	Pal7 = Pal(0b00000111)
)

// Pal is a screen pallet
type Pal byte

const (
	spriteCount = 16
	spriteSize  = 16
	resSize     = spriteCount * spriteSize
)

// Resource is a chunk of data containing
// 1. 256 16x16 sprites
type Resource [(resSize / 2) * resSize]byte

// Pget returns the pixel at x,y in the resource buffer
func (re *Resource) Pget(x, y int) Col {
	if x > resSize || y > resSize || x < 0 || y < 0 {
		return Col0
	}

	i := (y*resSize/2 + x/2)
	hi := (x%2 == 0)
	pixel := re[i]
	if hi {
		return Col(pixel&0b11110000) >> 4
	}
	return Col(pixel & 0b00001111)
}

// Pset sets the pixel at x,y in the resource buffer
func (re *Resource) Pset(x, y int, pixel Col) {
	if x > resSize || y > resSize || x < 0 || y < 0 {
		return
	}

	i := (y*resSize/2 + x/2)
	hi := (x%2 == 0)
	packed := re[i]
	if hi {
		packed &= 0b00001111
		pixel <<= 4
	} else {
		packed &= 0b11110000
	}

	re[i] = packed | byte(pixel)
}

var internalRes = Resource([(resSize / 2) * resSize]byte{
	//AA, AAAA, AAAA, BBBB, BBBB, BBBB, CCCC, CCCC, CCCC, DDDD, DDDD, DDDD, EEEE, EEEE, EEEE, FFFF, FFFF, FFFF, GGGG, GGGG, GGGG, HHHH, HHHH, HHHH, IIII, IIII, IIII, JJJJ, JJJJ, JJJJ, KKKK, KKKK, KKKK, LLLL, LLLL, LLLL, MMMM, MMMM, MMMM, NNNN, NNNN, NNNN, OOOO, OOOO, OOOO, PPPP, PPPP, PPPP, QQQQ, QQQQ, QQQQ, RRRR, RRRR, RRRR, SSSS, SSSS, SSSS, TTTT, TTTT, TTTT, UUUU, UUUU, UUUU, VVVV, VVVV, VVVV, WWWW, WWWW, WWWW, XXXX, XXXX, XXXX, YYYY, YYYY, YYYY, ZZZZ, ZZZZ, ZZZZ  0000, 0000, 0000, 1111, 1111, 1111, 2222, 2222, 2222, 3333, 3333, 3333, 4444, 4444, 4444, 5555, 5555, 5555, 6666, 6666, 6666, 7777, 7777, 7777, 8888, 8888, 8888, 9999, 9999, 9999, $$$$, $$$$, $$$$, %%%%, %%%%, %%%%, ...., ...., ...., ,,,,, ,,,,, ,,,,, ////, ////, ////, ????, ????, ????
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x0F, 0x00, 0xF0, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x0F, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0xF0, 0xFF, 0x0F, 0xF0, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0xFF, 0x0F, 0xF0, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x0F, 0x00, 0x0F, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
	0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0x0F, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0xF0, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x0F, 0xF0, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x0F, 0x0F, 0x00, 0xF0, 0xFF, 0x00, 0xFF, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0xF0, 0x0F, 0x00, 0x0F, 0x0F, 0x00, 0xF0, 0x00, 0xFF, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0xF0, 0x0F, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	//  ,     ,     , ----, ----, ----, ::::, ::::, ::::, [[[[, [[[[, [[[[, ]]]], ]]]], ]]]], ((((, ((((, ((((, )))), )))), )))),
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// CURSOR ->          ,
	0x00, 0x01, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0xF0, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0xFF, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0xFF, 0xFF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0xAF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0xAF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x11, 0x0A, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x11, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
})
